{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","features/TodoListsList/Todolist/todolists-reducer.ts","utils/error-utils.ts","features/TodoListsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/Todolist/Task/Task.tsx","features/TodoListsList/Todolist/Todolist.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","id","delete","todolistId","put","todoListId","taskTitle","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","v1","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addTask","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onChangeTitleHandler","useCallback","newValue","key","className","Completed","Checkbox","checked","newIsDoneValue","New","Delete","Todolist","demo","todolist","changeFilter","changeTodolistTitle","useDispatch","useEffect","tasks","setTasksAC","items","add_Task","change_TodolistTitle","newTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickHandler","onChangeStatusHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","Button","TodoListsList","todoLists","useSelector","state","addTodoList","thunk","todoList","item","addTodoListTC","changeTodolistTitleAC","changeTodoListTC","addTaskAC","addTaskTC","changeStatus","todolistID","removeTaskAC","Grid","container","style","padding","spacing","tl","Paper","Alert","elevation","CustomizedSnackbars","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","stateCopy","copyState","forEach","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f33d176e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9cd2c268-195b-4b42-abcf-5a1644af026e'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistApi = {\r\n    getTodoList() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n    },\r\n\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n\r\n    updateTodoListTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: taskTitle})\r\n    },\r\n\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    },\r\n\r\n    deleteTasks(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\n//types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 3\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype ResponseTaskType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n    item: TaskType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error}) as const\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionsType = SetAppErrorActionType | SetAppStatusActionType\r\n","import {v1} from 'uuid';\r\nimport {todolistApi, TodoListType} from '../../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../../app/app-reducer';\r\n\r\n\r\nexport let todolistId1 = v1()\r\nexport let todolistId2 = v1()\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistID: string) => ({type: 'REMOVE-TODOLIST', id: todolistID}) as const\r\nexport const addTodolistAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList}) as const\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n}) as const\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    id\r\n}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', status, id\r\n}) as const\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLISTS', todoLists}) as const\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.getTodoList()\r\n            .then((res) => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistApi.deleteTodoList(todoListId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.createTodoList(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const changeTodoListTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistApi.updateTodoListTitle(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}\r\n\r\n//types\r\nexport type  AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type SetTodoListActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetTodoListActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n\r\n\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodoListActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistApi, UpdateTaskModelType} from '../../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.todoListId]: action.tasks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistID: string) => ({type: 'REMOVE-TASK', todolistID, taskId}) as const\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n}) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todoListId\r\n}) as const\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.getTasks(todoListId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistApi.deleteTasks(todoListId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todoListId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todoListId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.createTask(todoListId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.task[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistApi.updateTask(todoListId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todoListId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListActionType\r\n    | ReturnType<typeof setTasksAC>\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem,disabled = false}: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !=null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant='outlined'\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label='Title'\r\n            helperText={error}\r\n        />\r\n        <IconButton  color='primary' onClick={addTask} disabled={disabled}><AddBox/></IconButton>\r\n    </div>\r\n});","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue:string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined' value={title} onChange={onChange} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n});","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (id: string, newValue: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo(({removeTask, changeTaskStatus, changeTaskTitle, task}: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        removeTask(task.id)\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return <li key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox color=\"primary\" checked={task.status === TaskStatuses.Completed} onChange={onChangeStatusHandler}/>\r\n        <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n\r\n        <IconButton onClick={onClickHandler}><Delete/></IconButton>\r\n    </li>\r\n\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolist-api';\r\nimport {FilterValuesType, TodoListDomainType} from './todolists-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasksTC} from './tasks-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodoListDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({\r\n                                        demo = false,\r\n                                        todolist,\r\n                                        changeFilter,\r\n                                        changeTaskTitle,\r\n                                        changeTaskStatus,\r\n                                        removeTask,\r\n                                        addTask,\r\n                                        changeTodolistTitle,\r\n                                        ...props\r\n                                    }: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [])\r\n\r\n    const add_Task = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n    const remove_Todolist = () => {\r\n        props.removeTodolist(todolist.id)\r\n    }\r\n    const change_TodolistTitle = useCallback((newTitle: string) => {\r\n        changeTodolistTitle(todolist.id, newTitle)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todolist.id)\r\n    }, [changeFilter, todolist.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todolist.id)\r\n    }, [changeFilter, todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todolist.id)\r\n    }, [changeFilter, todolist.id])\r\n\r\n\r\n    const onClickHandler = useCallback((taskId: string) => {\r\n        removeTask(taskId, todolist.id)\r\n    }, [removeTask, todolist.id])\r\n    const onChangeStatusHandler = useCallback((taskId: string, status: TaskStatuses) => {\r\n        changeTaskStatus(taskId, status, todolist.id)\r\n    }, [changeTaskStatus, todolist.id])\r\n    const onChangeTitleHandler = useCallback((taskId: string, newValue: string) => {\r\n        changeTaskTitle(taskId, newValue, todolist.id)\r\n    }, [changeTaskTitle, todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={todolist.title} onChange={change_TodolistTitle}/>\r\n                <IconButton onClick={remove_Todolist}\r\n                            disabled={todolist.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={add_Task} disabled={todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onClickHandler}\r\n                        changeTaskStatus={onChangeStatusHandler}\r\n                        changeTaskTitle={onChangeTitleHandler}\r\n                        task={t}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button color={'primary'} variant={todolist.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n\r\n                <Button color={'secondary'} variant={todolist.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n\r\n                <Button color={'inherit'} variant={todolist.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodoListDomainType\r\n} from './Todolist/todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from './Todolist/tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolist-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\n\r\ntype PropsType = {\r\n    demo?:boolean\r\n}\r\nexport const TodoListsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.task)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo){\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const thunk = addTodoListTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        const thunk = changeTodoListTC(id, newTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const thunk = removeTodoListTC(todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    return (\r\n        <> <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id];\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n            </Grid>\r\n\r\n        </>)\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function CustomizedSnackbars() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodoListsList} from '../features/TodoListsList/TodoListsList';\r\nimport {CustomizedSnackbars} from '../components/ErrorSnackbar/ErrorSnackBar';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType} from './app-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <CustomizedSnackbars/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodoListsList demo={demo}/>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from '../features/TodoListsList/Todolist/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodoListsList/Todolist/todolists-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    task: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app:appReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}